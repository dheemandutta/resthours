@model TM.RestHour.Models.CrewTimesheetViewModel

@{
    ViewBag.Title = "CrewTimeSheet";
}

<style>
	.ui-state-bookednc {
		background-color: orangered !important;
		color: #000 !important;
		border-color: orangered !important;
	}

	.ui-state-bookednonc {
		background-color: green !important;
		color: #000 !important;
		border-color: green !important;
	}
</style>

<link href="~/Content/jquery-ui.min.css" rel="stylesheet" />
<link href="~/Content/themes/base/datepicker.css" rel="stylesheet" />
<script src="~/Scripts/jquery-3.2.1.min.js"></script>
<link href="~/Content/plugin/datepicker/datepicker.css" rel="stylesheet" />
<link href="~/Content/plugin/datepicker/css/pickmeup.css" rel="stylesheet" />
<link href="~/Content/jquery.typeahead.css" rel="stylesheet" />
<link href="~/link/css/timesheet.css" rel="stylesheet" />


<body style="background-image: url(../background/timesheet.jpg);
    background-size: cover;">

    <div class="row">
        <div class="col-md-4">
            <h2 class="ta" style="color:#000;">Crew Time Sheet</h2>
        </div>
        <div class="col-md-8">
			<div class="row">

				@Html.Hidden("getcrewinfo", @Url.Action("GetAllCrewByCrewID", "AddCrew"))
				@Html.Hidden("basicTS", @Url.Action("AddCrewTimeSheet", "TimeSheet"))
				@Html.Hidden("checkcompliance", @Url.Action("CheckTimeSheetComplance", "TimeSheet"))
				@Html.Hidden("GetCrewBookedHours", @Url.Action("GetCrewBookedHours", "TimeSheet"))
				@Html.Hidden("GetCrewLastBookedHours", @Url.Action("GetCrewLastBookedHours", "TimeSheet"))
				@Html.Hidden("RetrieveTimeChange", @Url.Action("RetrieveTimeChange", "TimeSheet"))
				@Html.Hidden("RetrieveTimeChangeDate", Url.Action("RetrieveTimeChangeDate", "TimeSheet"))
				@Html.Hidden("GetAdjustmentFactor", @Url.Action("GetAdjustmentFactor", "TimeSheet"))
				@Html.Hidden("GetMinusOneBookStatus", @Url.Action("GetMinusOneBookStatus", "TimeSheet"))
				@Html.Hidden("GetSecondCrewBookedHours", @Url.Action("GetSecondCrewBookedHours", "TimeSheet"))
				@Html.Hidden("GetNCForMonth", @Url.Action("GetNCForMonth", "TimeSheet"))
				@Html.Hidden("GetNoNCForMonth", @Url.Action("GetNoNCForMonth", "TimeSheet"))
				<!-----Screen divided into 4+8 ---------->

				<input type="hidden" id="hdnAdjustmentFactor" />
				<input type="hidden" id="hdnID" />
				<input type="hidden" id="hdnNCID" />
				<div class="col-md-7">
					<div class="bac">
						<div class="card-block">
							<form class="form-horizontal" role="form">
								<div class="form-group">
									<div class="col-md-1"></div>
									<div class="col-md-6" style="width: 50%;padding: 0;">
										<label for="selectCrew" class="control-label">Select Crew</label><br />
										@Html.HiddenFor(model => model.AdminStatus, new { id = "hdnAdminstatus", value = Model.AdminStatus })
										@Html.HiddenFor(model => model.CrewAdminId, new { id = "hdnCrewAdminId", value = Model.CrewAdminId })
										@Html.HiddenFor(model => model.Crew.ID, new { id = "hdnCrewId", value = Model.Crew.ID })
										@Html.DropDownListFor(model => model.Crew.ID, (IEnumerable<SelectListItem>)ViewBag.Crew, "Select", new { @class = "form-control", @id = "ddlCrew" })
										<div id="divdaytoggle" style="display: none;">
											<input id="daytoggle" checked data-toggle="toggle" data-on="Time 1" data-off="Time 2" data-onstyle="success" data-offstyle="danger" type="checkbox">
										</div>
									</div>
									<div class="col-md-5" style=" margin-top:1px; width:36%;">
										<label>Total Work Hours:</label>
										<input type="text" class="form-control" id="TotalWorkHours" placeholder="Total Work Hours" style="width: 150px;" />
									</div>

									@*<input  id="daytoggle" checked data-toggle="toggle" data-style="android" data-onstyle="success" data-offstyle="danger" type="checkbox">*@
								</div>

								<div class="form-group">
									<label for="inputPassword3" class="col-sm-1 control-label"></label>
									<div class="col-sm-6" style="padding:0;">
										@*<label>Days</label>*@
										<div class="multiple">

										</div>
									</div>

									<div class="col-md-4" style="padding: 0 0px 0 17px;">

										@*<div class="form-inline">*@
										@*<div class="form-horizontal" style="margin-bottom:3px;">
									<br />

								</div>*@
										<div class="form-horizontal" style="margin-bottom:3px;">
											<label>Total Rest Hours:</label>
											<input type="text" class="form-control" id="TotalRestHours" placeholder="Total Rest Hours" style="width: 150px;" />
										</div>
										@*</div>*@

									</div>




									<div class="col-md-4" style="margin-top:14px; padding: 0 0px 0 18px;">

										<button class="button1" type="button" id="btnCopyTimeSheet" style="width:142px;"  >Copy Time Sheet</button>
									</div>
								</div>
							</form>
						</div>






						<div>

							<table class="tg" id="schedule_header">
								<tr id="schedule">
									<th class="tg-amwm" id="newhead" colspan="2">00</th>
									<th class="tg-amwm" colspan="2">00</th>
									<th class="tg-amwm" colspan="2">01</th>
									<th class="tg-amwm" colspan="2">02</th>
									<th class="tg-amwm" colspan="2">03</th>
									<th class="tg-amwm" colspan="2">04</th>
									<th class="tg-amwm" colspan="2">05</th>
									<th class="tg-amwm" colspan="2">06</th>
									<th class="tg-amwm" colspan="2">07</th>
									<th class="tg-amwm" colspan="2">08</th>
									<th class="tg-amwm" colspan="2">09</th>
									<th class="tg-amwm" colspan="2">10</th>
									<th class="tg-amwm" colspan="2">11</th>
									<th class="tg-amwm" colspan="2">12</th>
									<th class="tg-amwm" colspan="2">13</th>
									<th class="tg-amwm" colspan="2">14</th>
									<th class="tg-amwm" colspan="2">15</th>
									<th class="tg-amwm" colspan="2">16</th>
									<th class="tg-amwm" colspan="2">17</th>
									<th class="tg-amwm" colspan="2">18</th>
									<th class="tg-amwm" colspan="2">19</th>
									<th class="tg-amwm" colspan="2">20</th>
									<th class="tg-amwm" colspan="2">21</th>
									<th class="tg-amwm" colspan="2">22</th>
									<th class="tg-amwm" colspan="2">23</th>
								</tr>

								<tr id="trclone">
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0000" id="-2"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0000" id="-1"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0030" id="0"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0100" id="1"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0130" id="2"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0200" id="3"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0230" id="4"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0300" id="5"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0330" id="6"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0400" id="7"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0430" id="8"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0500" id="9"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0530" id="10"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0600" id="11"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0630" id="12"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0700" id="13"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0730" id="14"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0800" id="15"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0830" id="16"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0900" id="17"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="0930" id="18"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1000" id="19"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1030" id="20"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1100" id="21"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1130" id="22"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1200" id="23"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1230" id="24"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1300" id="25"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1330" id="26"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1400" id="27"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1430" id="28"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1500" id="29"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1530" id="30"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1600" id="31"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1630" id="32"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1700" id="33"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1730" id="34"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1800" id="35"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1830" id="36"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1900" id="37"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="1930" id="38"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2000" id="39"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2030" id="40"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2100" id="41"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2130" id="42"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2200" id="43"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2230" id="44"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2300" id="45"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2330" id="46"></td>
									<td class="tg-yw4l" height="20px" name="timebox" time-in-minute="2400" id="47"></td>
								</tr>
							</table>
						</div>
						<div class="tg" id="schedule"></div>

						@*<div class="modal-dialog">

				</div>*@



						<div></div>
						<div class="js-result-container"></div>
						<table id="cloneTable" class="table-responsive">
							<tr>
								<td><b>Start Time</b></td>
								<td><b>End Time</b></td>
								<td>&nbsp;&nbsp;&nbsp;</td>
								<td>&nbsp;&nbsp;&nbsp;</td>
							</tr>
							<tr class="clonrow">

								<td style="width:47%">
									<div class="typeahead__container">
										<div class="typeahead__field">
											<span class="typeahead__query">
												<input class="js-typeahead"
													   name="q"
													   id="stdt0"
													   type="search"
													   autofocus
													   autocomplete="off" disabled="disabled">
											</span>

										</div>
									</div>
								</td>
								<td style="width:47%">

									<div class="typeahead__container">
										<div class="typeahead__field">
											<span class="typeahead__query">
												<input class="js-typeahead"
													   name="q"
													   id="enddat0"
													   type="search"
													   autofocus
													   autocomplete="off" disabled="disabled">
											</span>

										</div>
									</div>

								</td>
								<td>
									<div class="popup" onclick="myFunction()">
										<span class="ii">i</span>
										<span class="popuptext" id="myPopup">
											&nbsp;&nbsp;  1. Click on the box for entering time in hours format 0000hrs.
											&nbsp;&nbsp; 2. Use backspace button to delete the existing 0000.
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
											&nbsp;
											&nbsp;  &nbsp;3. Type in the desired hours in XXXX format with XX00 or XX30 as available options.
											<span style="float: right; margin-right: 15px;"><i class="fa fa-times"></i></span>
										</span>
									</div>
								</td>
								<td style="width:16%"></td>
								<td style="width:16%"></td>
							</tr>
							<tr class="clonrow">

								<td style="width:47%">
									<div class="typeahead__container">
										<div class="typeahead__field">
											<span class="typeahead__query">
												<input class="js-typeahead"
													   name="q"
													   id="stdt1"
													   type="search"
													   autofocus
													   autocomplete="off" disabled="disabled">
											</span>

										</div>
									</div>
								</td>
								<td style="width:47%">

									<div class="typeahead__container">
										<div class="typeahead__field">
											<span class="typeahead__query">
												<input class="js-typeahead"
													   name="q"
													   id="enddat1"
													   type="search"
													   autofocus
													   autocomplete="off" disabled="disabled">
											</span>

										</div>
									</div>

								</td>
								<td style="width:16%"></td>
								<td style="width:16%"></td>
							</tr>
							<tr class="clonrow">

								<td style="width:47%">
									<div class="typeahead__container">
										<div class="typeahead__field">
											<span class="typeahead__query">
												<input class="js-typeahead"
													   name="q"
													   id="stdt2"
													   type="search"
													   autofocus
													   autocomplete="off" disabled="disabled">
											</span>

										</div>
									</div>
								</td>
								<td style="width:47%">

									<div class="typeahead__container">
										<div class="typeahead__field">
											<span class="typeahead__query">
												<input class="js-typeahead"
													   name="q"
													   id="enddat2"
													   type="search"
													   autofocus
													   autocomplete="off" disabled="disabled">
											</span>

										</div>
									</div>

								</td>
								<td style="width:16%">
									<a href="#" class="btn btn-primary a-btn-slide-text addbtn" style="background: #f66c6c;border: #f66c6c;border-radius: 70%;">
										<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
										<span><strong></strong></span>
									</a>
								</td>
								<td style="width:16%">
									<a href="#" class="btn btn-primary a-btn-slide-text delbtn" style="background: #22baa0;border: #22baa0;border-radius: 70%;">
										<span class="glyphicon glyphicon-trash"></span>
										<span><strong></strong></span>
									</a>
								</td>
							</tr>
						</table>


						@*<span class="pos" style="align-self:center"></span>*@
						@*<div class="pos" style=""></div>*@



						<div align="right">
							@*<span class="pos" style="align-self:center"></span>*@
							@*<div class="pos" style=""></div>*@
							<button type="button" class="button1" id="btnAdd" style="margin-right:25px;" disabled>Add</button>
						</div>
					</div>

				</div>
				<div class="col-md-5">
					<div class="bacb" style="height:478px;">
						<div class="" id="dvuserdetailsn">

							<legend>Crew Information</legend>
							<div class="row">

								<div class="form-group">
									<input type="hidden" id="ID" />
								</div>


								<div class="form-horizontal" style="margin-bottom:3px;">
									<label class="col-md-2 control-label" style="width: 19%;">Name:</label>
									<div class="col-md-9" style="margin-bottom: 6px;">
										<input type="text" class="form-control" id="FullName" placeholder="FullName" />
									</div>
								</div>



								<div class="form-horizontal" style="margin-bottom:3px;">
									<label class="col-md-2 control-label" style="width: 19%;">Rank:</label>
									<div class="col-md-9" style="margin-bottom: 6px;">
										<input type="text" class="form-control" id="Rank" placeholder="Rank" />
									</div>
								</div>





								<div class="form-horizontal" style="margin-bottom:3px;">
									<label class="col-md-2 control-label" style="width: 19%; margin-right: 14px;">Service:</label>
									<form>
										<label style="max-width: 29%;">
											<input type="text" class="form-control" id="ServiceTerms1" placeholder="From" readonly />
										</label>
										<label style="max-width: 13%;">
											<span>To</span>
										</label>
										<label style="max-width: 13%;">
											<span>&nbsp;</span>
										</label>
										<label style="max-width: 29%;">
											<input type="text" class="form-control" id="ServiceTerms2" placeholder="To" readonly />
										</label>
									</form>
								</div>






								@*<div style="background-color: #4fba97" class="btn btn-default">
							<p><a href="@Url.Action("CrewServiceTerms", "CrewHealth")">Modify Service Terms</a></p>
						</div>*@





							</div>
							<br />
							<div class="" id="dvuserdetailsn1">

								<legend>Non-Conformities(N/C)</legend>
								<div class="row">

									<div class="form-group">
										<input type="hidden" id="ID" />
									</div>


									<div class="form-horizontal">

										@*<input type="text" class="form-control" id="FullName" />*@
										<div class="form-control" id="Comments" style="width:90%; height: 137px; position: relative; margin-bottom: 11px; margin-left: 18px; color:#f82020;"></div>



										<div class="form-horizontal" style="margin-left: 18px;">
											<legend>Comments</legend>
											<textarea type="text" class="form-control valid" id="txtComments" placeholder="Comments" style="width: 95% !important;"></textarea>
											@*<input type="text" class="form-control" id="txtComments" placeholder="Comments" />*@
										</div>

									</div>

								</div>


							</div>
						</div>




						<div>

							<div class="modal-dialog" id="Resulta">
								@*    For TimePicker     *@
							</div>




							@*<div class="col-sm-4">*@

							@*</div>*@
						</div>




					</div>
					<div id="dvMessageBox" title="Download complete">
						<p id="pMessageText"></p>
					</div>

				</div>
			</div>
</body>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                @*<button type="button" class="close" data-dismiss="modal">&times;</button>*@
                <h4 class="modal-title" id="myModalLabel"></h4>
            </div>
            <div class="modal-body">
                <h3><span id="succMsg"></span></h3>
            </div>
            <div class="modal-footer">


                <button id="btnCloseModal" type="button" class="btn btn-default">Close</button>
            </div>
        </div>

    </div>


</div>



@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/themes/base/css")

    <script src="~/Scripts/TimePicker/jquery.timepicker.min.js"></script>
    <script src="~/Scripts/jquery.typeahead.js"></script>
    <link href="~/Content/TimePicker/jquery.timepicker.min.css" rel="stylesheet" />

    <script src="~/Scripts/toastr.min.js"></script>
    <link href="~/Content/toastr.min.css" rel="stylesheet" />
    <script src="~/Scripts/notify.min.js"></script>
    <script src="~/Scripts/bootstrap2-toggle.min.js"></script>
    <link href="~/Content/bootstrap2-toggle.min.css" rel="stylesheet" />

    <script>
        // When the user clicks on div, open the popup
        function myFunction() {
            var popup = document.getElementById("myPopup");
            popup.classList.toggle("show");
        }
    </script>
    <script type="text/javascript">


		var count = 1;
		var rowcounter = 2;
		var newrowCreated = false;
		var timeModified = '';
		var dateModified = '';
		var adjustmentvalue = '';
		var prevAdjustmentValue = '';
		var nam2 = [];
		var orderCount = 0;
		var tsele = 0;
		var selecteddiv = [];
		var loggedInUserId = 0;
		var startTimeInMinute = 0;
		var endTimeInMinute = 0;
		var hour = '';
		var minute = '';
		var startcell = 0;
		var endcell = 0;
		var thisRow;
		var thisRowIndex;
		var validatingRow;
		var validatingRowIndex;
		var validatingStartTime, validatingStartTimeInMinute;
		var validatingEndTime, validatingEndTimeInMinute;
		var isValidationTripped = false;
		var validationTrippedForRowIndex;
		var thisTextBoxName;
		var thisTextBoxStartEnd;
		var ncoccured = 0;
		var arrtimebox = [];
		var timeadjustmentvalidity = true;

		var data = {
			hours: ["0000", "0030", "0100", "0130", "0200", "0230", "0300", "0330", "0400", "0430", "0500", "0530", "0600", "0630", "0700", "0730", "0800", "0830"
				, "0900", "0930", "1000", "1030", "1100", "1130", "1200", "1230", "1300", "1330", "1400", "1430", "1500", "1530", "1600", "1630", "1700", "1730"
				, "1800", "1830", "1900", "1930", "2000", "2030", "2100", "2130", "2200", "2230", "2300", "2330", "2400"]

		};
		var allowedhours = [];
		allowedhours= ["0000", "0030", "0100", "0130", "0200", "0230", "0300", "0330", "0400", "0430", "0500", "0530", "0600", "0630", "0700", "0730", "0800", "0830"
			, "0900", "0930", "1000", "1030", "1100", "1130", "1200", "1230", "1300", "1330", "1400", "1430", "1500", "1530", "1600", "1630", "1700", "1730"
			, "1800", "1830", "1900", "1930", "2000", "2030", "2100", "2130", "2200", "2230", "2300", "2330", "2400"]

		//initialize calendar
		$('.multiple').datepicker({
			inline: true,
			firstDay: 1,
			showOtherMonths: true,
			changeMonth: true,
			changeYear: true,
			maxDate: '+0D',
			dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
			onSelect: function (date) {
				// Your CSS changes, just in case you still need them
				//alert(date);
				if ($('#ddlCrew').val() != '') {
					//console.log('in if');



					//console.log('removing options');
					//removeTP($('select.timepicker'));
					// addTP($('select.timepicker'));
					ClearWorkingTime();
					$('[name=timebox]').removeClass('occupied_red');
					$.when( GetAdjustmentFactor()).done(function (result) {
						console.log('When Calendar is clicked--------');
						console.log(result);



						if (result == '+1D') {
							var msg = "You are not allowed to book time for this date. ";
							$('#myModal').modal('show');
							$('#succMsg').html(msg);
							$('#btnAdd').attr('disabled', true);
							$('#daytoggle').bootstrapToggle('disable');
							$('#divdaytoggle').hide();
						}
						else if (result == '-1D')
						{
							$('#daytoggle').bootstrapToggle('enable');
							//make it visible
							//$(".show_hide").show();
							$('#divdaytoggle').show();
							LoadData();
						}
						else if (result == 'BOOKING_NOT_ALLOWED')
						{
							$('#btnAdd').attr('disabled', false);
							$('#daytoggle').bootstrapToggle('disable');
							$('#divdaytoggle').hide();
							LoadData();
						}
						else
						{
							$('#btnAdd').attr('disabled', false);
							$('#daytoggle').bootstrapToggle('disable');
							$('#divdaytoggle').hide();
							LoadData();
						}
					});


					$('#txtComments').val('');


				}
			}
		});

		$("#btnCloseModal").on("click", function (event) {

			//CompleteRegistration(event);
			$('#myModal').modal('hide');

			return false;
		});


		$('#ddlCrew').on('change', function () {

			//debugger;
			if ($('#ddlCrew').val() != '') {
				$('[name=timebox]').removeClass('occupied_red');
				LoadData();

				SetCalendarColor();




                if ($('#hdnAdminstatus').val() === 'A') {


                    //logged in user is admin but he has selected a user under him
                    if ($('#ddlCrew').val() != $('#hdnCrewAdminId').val()) {
                        console.log('in disabled');
                        console.log($('#ddlCrew').val());
                        console.log($('#hdnCrewAdminId').val());
                        $('input[id*="stdt"],input[id*="enddat"]').attr('disabled', 'disabled');
                        $('#btnCopyTimeSheet').attr('disabled', 'disabled');
                    }
                    else {
                        $('input[id*="stdt"],input[id*="enddat"]').removeAttr('disabled');
                        $('#btnCopyTimeSheet').removeAttr('disabled');
                    }
                }
                else if ($('#hdnAdminstatus').val() === 'S') {
                    $('input[id*="stdt"],input[id*="enddat"]').attr('disabled', 'disabled');
                    $('#btnCopyTimeSheet').attr('disabled', 'disabled');
                }
			}
		});

		function GetLastMinusAdjustmentDate(crewid, bdate) {
			var m = $('#GetMinusOneBookStatus').val();
			var dfrminusoneAdjustment = $.Deferred();
			return $.ajax({
				url: m,
				data:
				{
					crewId: crewid,
					bookDate: bdate
				},
				type: "GET",
				contentType: "application/json;charset=UTF-8",
				dataType: "json",
				async: 'false',
				complete: function (result) {

				},
				error: function (errormessage) {
					//debugger;
					console.log(errormessage.responseText);
				}
			});
		}

		function changeColor(drpdn) {


			//the drpdn parameter is no longer needed just kept to prevent code break
			//Commented by Dheeman
			//$('.ui-datepicker-calendar tr').each(function () {

			//	//chnage colour of calendar for altered date
			//	$(this).find('td.ui-datepicker-current-day').each(function () {
			//		//console.log('found');
			//		initflag = false;

			//	});
			//});



			//alert(newrowCreated);
			if ($('#ddlCrew').val().length > 0) {
			//initflag == false &&


				//var ctrl = $(drpdn);
				//debugger;
				var compliancecheckurl = $('#checkcompliance').val();
				var tsdata = [];
				//run through each row
                $('.table-responsive tr').not(":first").each(function (i, row) {

                    // reference all the stuff you need first
                    var $row = $(row),
                        $stdt = $row.find('input[id*="stdt"]'),
                        $enddt = $row.find('input[id*="enddat"]');

                    // if ($enddt.val() == '23:59') $enddt = '00:00' ;

                    if ($stdt.val() != $enddt.val()) {
                        tsdata[i] = new Array($stdt.val(), $enddt.val());
                    }


                    //console.log('Prining tsdata');
                    //console.log(tsdata);

                });

				var allowpost = false;
				var startsection = '';
				var endsection = '';
				for (var q = 0; q < tsdata.length; q++) {
					//console.log(tsdata[q]);

					//check if both values are not 0
					if (tsdata[q] != '0000,0000') {
						// debugger;
						allowpost = true;
					}

					if (tsdata[q][1] != '0000') {
						allowpost = true;
						console.log('RePainting timeline with -');
						console.log(tsdata[q][0]);
						console.log(tsdata[q][1]);

						CalculateHoursAndPaint(tsdata[q][0], tsdata[q][1]);
					}
					else {
						allowpost = false;
					}

				}

				if (allowpost) {

					CheckCompliance();
				}
				else {
					ClearWorkingTime();
				}

				// }

			} //crew  end




		}

		function GetAdjustmentFactor() {
			var adjustmentFactor = $('#GetAdjustmentFactor').val();
			var selectedDt = '';
			var dfrAdjustment = $.Deferred();
			selectedDt = $('.multiple').val();

			if (selectedDt == '') {

				var d = new Date();

				var month = d.getMonth() + 1;
				var day = d.getDate();

				var output = (('' + month).length < 2 ? '0' : '') + month + '/' +
					(('' + day).length < 2 ? '0' : '') + day + '/' +
					d.getFullYear();



				selectedDt = output;
				//console.log(selectedDt);
			}

			//debugger;  //ok
			 $.ajax({
				url: adjustmentFactor,
				data:
				{
					selectedDate: selectedDt
				},
				type: "GET",
				contentType: "application/json;charset=UTF-8",
				dataType: "json",
				async: 'false',
				success: function (result) {
					adjustmentvalue = result;
					console.log('Printing Current Adjustment Value.....');
					console.log(adjustmentvalue);
					dfrAdjustment.resolve(adjustmentvalue);
				},
				error: function (errormessage) {
					//debugger;
					console.log(errormessage.responseText);
				}
			});



			return $.when(dfrAdjustment).done(function () {
				console.log('tasks in GetAdjustmentFactor are done');
				// Both asyncs tasks are done
			}).promise();
		}

		function EnableTypeahead() {
			console.log('in EnableTypeahead');
			typeof $.typeahead === 'function' && $.typeahead({
				input: ".js-typeahead",
				minLength: 1,
				maxLength: 4,
				order: "asc",
				group: false,
				maxItemPerGroup: 4,
				hint: true,
				dropdownFilter: false,
				href: "https://en.wikipedia.org/?title={{display}}",
				template: "{{display}}, <small><em>{{group}}</em></small>",
				emptyTemplate: "no result for {{query}}",
				source: {
					hours: {
						data: data.hours
					}
				},
				callback: {
					onClickAfter: function (node, a, item, event) {
						event.preventDefault();

						//var r = confirm("You will be redirected to:\n" + item.href + "\n\nContinue?");
						//if (r == true) {
						//	window.open(item.href);
						//}

						$('.js-result-container').text('');

						//console.log(item);
						//changeColor(item);
					},
					onResult: function (node, query, obj, objCount) {

						//console.log(objCount)

						var text = "";
						//if (query !== "") {
						//	text = objCount + ' elements matching "' + query + '"';
						//}
						$('.js-result-container').text(text);



					}
				},
				debug: true
			});
		}

		function SetCalendarColor() {

			var nc = $('#GetNCForMonth').val();
			var nonc = $('#GetNoNCForMonth').val();

			if ($('#ddlCrew').val() > 0) {

				$.ajax({
					url: nc,
					data: ({ bookDate: $('.multiple').val(), CrewId: $('#ddlCrew').val() }),
					type: "GET",
					contentType: "application/json;charset=UTF-8",
					dataType: "json",
					async: 'false',
					success: function (result) {

						//remove all colours first
						$('.ui-datepicker-calendar tr td').each(function () {

							var blankcell = $(this);
						});

						//for (i = 0; i < result.length; i++) {


						$('.ui-datepicker-calendar tr td').each(function () {

							//$(this).find('td').each(function () {

							var cell = $(this);


							$(cell).children().each(function () {
								//console.log(this);
								var anchor = this;

								for (var y = 0; y < result.length; y++) {
									if (result[y] == $(anchor).text()) {
										console.log('Coloring Red');
										$(cell).find('a.ui-state-default').addClass('ui-state-bookednc');
										$(cell).addClass('ui-state-bookednc');
									}
								}


							});


						});

					

					},
					error: function (errormessage) {
						//debugger;
						console.log(errormessage.responseText);
					}
				});

				//color non-nc cells green
				$.ajax({
					url: nonc,
					data: ({ bookDate: $('.multiple').val(), CrewId: $('#ddlCrew').val() }),
					type: "GET",
					contentType: "application/json;charset=UTF-8",
					dataType: "json",
					async: 'false',
					success: function (result) {

						

						//for (i = 0; i < result.length; i++) {


						$('.ui-datepicker-calendar tr td').each(function () {

							

							var cell = $(this);


							$(cell).children().each(function () {
							
								var anchor = this;

								for (var y = 0; y < result.length; y++) {
									if (result[y] == $(anchor).text()) {
										console.log('Coloring Green');
										$(cell).find('a.ui-state-default').addClass('ui-state-bookednonc');
										$(cell).addClass('ui-state-bookednonc');
									}
								}


							});


						});



					},
					error: function (errormessage) {
						//debugger;
						console.log(errormessage.responseText);
					}
				});
			}

		}

		//add a new row
		function addCloneMappingRow() {

			var d = new $.Deferred();

			//create a original copy of the row to clone later
			var $tr = $('table.table-responsive tr.clonrow:nth-child(4)').clone();

			//console.log('Cloning Row');
			//console.log($tr);
			rowcounter = -1;
			$('.table-responsive tr').not(":first").each(function (i, row) {
				rowcounter += 1;
			});


			//debugger;
			//increase index of row counter
			rowcounter = rowcounter + 1;

			var newRow = $tr.clone();

			newRow.find('td').each(function () {
				var el = $(this).find('input');
				//console.log(el);
				var id = el.attr('id') || null;
				if (id) {
					var i = id.substr(id.length - 1);
					var prefix = id.substr(0, (id.length - 1));
					console.log('prifix');
					console.log(prefix);


					console.log(rowcounter);
					el.attr('id', prefix + (rowcounter));
					el.val('0000');
					//el.attr('name', prefix + (rowcounter));
				}
			});


			newrowCreated = true;
			//add dp to the new row
			//console.log('New Row');
			//console.log(newRow);

			//$(newRow).find('input, hidden, select, textarea, checkbox').each(function () {
			//	var currentNameAttr = $(this).attr('name');
			//	// get the current name attribute
			//	// construct a new name attribute using regular expressions
			//	// the match is divided into three groups (indicated by parentheses)
			//	// p1 will be 'v', p2 will be the number, p3 will be the remainder of the string
			//	var newNameAttr = currentNameAttr.replace(/([^\d]*)(\d*)([^\w]*)/, function (match, p1, p2, p3) {
			//		return p1; //+ (count) + p3;
			//	});
			//	$(this).attr('name', newNameAttr);
			//	if (newNameAttr.indexOf("id") !== -1) {
			//		$(this).attr('value', '');
			//	} else {
			//	}
			//});

			//debugger;
			$('table.table-responsive').append(newRow);

			count++;
			d.resolve();
			return d.promise();
		}


		function ClearTimePickers() {
			var rowcounter = 0;
			//delete extra rows
			$('.table-responsive tr').not(":first").each(function (i, row) {
				rowcounter++;

				if (rowcounter > 3) {
					$(this).remove();
				}
			});

			//clear  other sttaic time pickers
			$('#stdt0').val('0000');
			$('#enddat0').val('0000');
			$('#stdt1').val('0000');
			$('#enddat1').val('0000');
			$('#stdt2').val('0000');
			$('#enddat2').val('0000');

			$('#txtComments').val('');
			$('#Comments').html('');

			//reset css
			$('#stdt0').css('border-color', 'Black');
			$('#enddat0').css('border-color', 'Black');
			$('#stdt1').css('border-color', 'Black');
			$('#enddat1').css('border-color', 'Black');
			$('#stdt2').css('border-color', 'Black');
			$('#enddat2').css('border-color', 'Black');
		}

		function LoadSecondData() {
			$('[name=timebox]').removeClass('pre-occupied');
			$('[name=timebox]').removeClass('occupied');
			var getcrewInfoPostLink = $('#getcrewinfo').val();
			var isBookingBlocked1 = false;
			$('#hdnID').val('');
			$('#hdnNCID').val('');
			//debugger;
			var getCrewBookedHours2 = $('#GetSecondCrewBookedHours').val();
			var selectedDate = $('.multiple').val();
			//debugger;  //ok

			console.log('In Data Load2-------------');

			//check if there is a minus one day adjustement where this crew ha snot filled his complete double time sheet
			$.when(GetLastMinusAdjustmentDate($('#ddlCrew').val(), $('.multiple').val()), GetAdjustmentFactor()).done(function (result, result1) {
				console.log('In Minus One check');
				console.log(result[0].BookCount);
				if (result[0].BookCount == 1) {
					isBookingBlocked1 = true;
					$('#btnAdd').attr('disabled', true);
					//show message and block booking
					var msg = "You are not allowed to book time for this date. Please complete your booking for " + result[0].LastBookDate;
					$('#myModal').modal('show');
					$('#succMsg').html(msg);
				}


				if (!isBookingBlocked1) {
					$('#btnAdd').attr('disabled', false);
					console.log('Booking is not blocked');
					$.when(GetCrewBasicDetails(getcrewInfoPostLink), GetCrewBookedHours(getCrewBookedHours2)).done(function (res, res1) {

						console.log('In LoadData');
						//console.log(res1[0].ActualHours);

						var result = res1[0];

						//$(function () {


						//var getters = addTPDynamic($('input.js-typeahead'));

						//added a check here to ensure done is working
						if (result != 'null') {
							//$.when.apply(this, getters).then(function () {
							SetTimeInPicker(result).done(function () {
								// function1 is done, we can now call function2
								console.log('SetTimeInPicker is done!');

								CheckCompliance().done(function () {
									//function2 is done
									console.log('CheckCompliance is done!');



								}); //end check compliance


							}); //end settimepicker

							//}); //end AddTP
						}
						else {
							ClearTimePickers();
							//CheckCompliance();  //.done(function () {
							//function2 is done
							//console.log('Do Nothing');
							//$('.multiple').val(selectedDate);



							//}); //end check compliance
						}

						//});




					});

				}

			});



			return false;
		}

		//diable  toggle at initialization
		$('#daytoggle').bootstrapToggle('disable');

		$('#daytoggle').change(function () {
			//$('#console-event').html('Toggle: ' + $(this).prop('checked'))
			console.log('Toggle Status');
			//console.log($(this).prop('checked'));

			if ($(this).prop('checked') == true) {
				ClearTimePickers();
				$('#hdnID').val('');
				$('#hdnNCID').val('');
				//load day1
				// you need to do nothing here as day 1 is loaded by default.
				LoadData();
			}
			else if ($(this).prop('checked') == false) {
				ClearTimePickers();
				$('#hdnID').val('');
				$('#hdnNCID').val('');
				//load day2
				LoadSecondData();
			}
		});

		function CalculateHoursAndPaint(starttime,endtime,isNC)
		{
			var startarr = [];
			var endarr = [];

			//if (typeof starttime === 'undefined' || typeof endtime === 'undefined') {
			//	console.log('Do Nothing');
			//}
			//else {

            if (typeof (endtime) === "undefined") {
                endtime = "";
            }

				startarr[0] = starttime.substr(0, 2);
				startarr[1] = starttime.substr(starttime.length - 2);

				endarr[0] = endtime.substr(0, 2);
				endarr[1] = endtime.substr(endtime.length - 2);

				startcell = 0;
				endcell = 0;

				var s = parseInt(startarr[0]) * 2;
				var s_min = parseInt(startarr[1]);

				if (s_min > 0) {
					s = s + 1;
				}

				startcell = s + 1;

				var e = parseInt(endarr[0]) * 2;

				var e_min = parseInt(endarr[1]);

				if (e_min > 0) {
					e = e + 1;
				}

				endcell = e;

				//adjust for extra hidden cell
				if (adjustmentvalue == '0' || adjustmentvalue == '+1' || adjustmentvalue == '+30') {
					console.log('StartCell');

					startcell = startcell - 1;
					endcell = endcell - 1;
					console.log(startcell);
					console.log(endcell);
				}
				else if (adjustmentvalue == "-1") {
					console.log('StartCell');
					console.log(startcell);
					if (parseInt(startcell) == 1) {
						startcell = -1;
						endcell = endcell + 2;
					}
					else (parseInt(startcell) > 1)
					{
						startcell = startcell - 3;
						endcell = endcell - 3;
					}
				}
				else if (adjustmentvalue == "-30") {
					console.log('StartCell30');
					console.log(startcell);
					if (parseInt(startcell) == 1) {
						startcell = 1;
						endcell = endcell;
					}
					else (parseInt(startcell) > 1)
					{
						startcell = startcell - 2;
						endcell = endcell - 2;
					}
				}

				//store in array
				arrtimebox.push([startcell, endcell]);
			//} //end if


		}

		function PaintBox(isnc) {


		  ReDrawTimeLine(adjustmentvalue);



			var $tr = $('#trclone');
			//console.log('In PaintBox');
			//console.log(isnc);
			//de colorise the timeline
			//
			$('#trclone').find('td.occupied_red').removeClass('occupied_red');
			$('#trclone').find('td.occupied').removeClass('occupied');

			//$('[name=timebox]').removeClass('occupied_red');

			//console.log('In PaintBox - arrtimebox');
			//console.log(arrtimebox[0]);

			for (var i = 0, l = arrtimebox.length; i < l; i++) {


				startcell = arrtimebox[i][0];
				endcell = arrtimebox[i][1];
				$('#trclone').find('td').each(function () {

					var tdid = $(this).attr('id');
					//console.log('In PaintBox - cells');

					if (isnc == 0) {

						if (parseInt(tdid) >= parseInt(startcell) && parseInt(tdid) <= parseInt(endcell)) {

							//console.log(tdid);
							$(this).addClass('occupied');
						}

					}
					else {

						if (parseInt(tdid) >= parseInt(startcell) && parseInt(tdid) <= parseInt(endcell)) {

							console.log(tdid);
							$(this).addClass('occupied_red');
						}

					}

				});

			}

			//empty array
			arrtimebox.length = 0;
			//re-initialize nc variable
			ncoccured = 0;



		}

		function DeColorise() {
			var $tr = $('#trclone');
			console.log('In DeColorise');

			//de colorise the timeline
			//
			$('#trclone').find('td.occupied_red').removeClass('occupied_red');
			$('#trclone').find('td.occupied').removeClass('occupied');
		}

		function ReDrawTimeLine(adjfactorvalue) {
			if (adjfactorvalue == '-1' || adjfactorvalue == '-30') {
				$('#schedule th:nth-child(1)').show();
				$('#trclone td:nth-child(1)').show();
				$('#trclone td:nth-child(2)').show();

				console.log('in redraw');

			}
			else if (adjustmentvalue == '0' || adjustmentvalue == '+1' || adjustmentvalue == '+30') {
				$('#schedule th:nth-child(1)').hide();
				$('#trclone td:nth-child(1)').hide();
				$('#trclone td:nth-child(2)').hide();
			}
		}

		//initialize type ahead
		typeof $.typeahead === 'function' && $.typeahead({
			input: ".js-typeahead",
			minLength: 1,
			maxLength:4,
			order: "asc",
			group: false,
			maxItemPerGroup: 3,

			hint: true,
			dropdownFilter: false,
			href: "https://en.wikipedia.org/?title={{display}}",
			template: "{{display}}, <small><em>{{group}}</em></small>",
			emptyTemplate: "no result for {{query}}",
			source: {
				hours: {
					data: data.hours
				}
			},
			callback: {
				onClickAfter: function (node, a, item, event) {
					event.preventDefault();

					//var r = confirm("You will be redirected to:\n" + item.href + "\n\nContinue?");
					//if (r == true) {
					//	window.open(item.href);
					//}

					$('.js-result-container').text('');
					//console.log(item.display);
					//console.log(node);
					//ValidateTime();
					changeColor(item);


				},
				onResult: function (node, query, obj, objCount) {

					//console.log(objCount)

					var text = "";
					if (query !== "") {
						text = ''; //objCount + ' elements matching "' + query + '"';
					}
					$('.js-result-container').text(text);


				}
			},
			debug: true
		});

		$('table.table-responsive').on('click', '.addbtn', function () {
			addCloneMappingRow().done(function (response) {
				console.log('adding row completed');

				EnableTypeahead();
			});
		});

		$('table.table-responsive').on('click', '.delbtn', function () {
			//deleteCloneMappingRow(this);
			if (count <= 1) {
				alert("No Privilege to Remove");
				return false;
			}
			else {

				$(this).parent().parent().remove();
				count--;

			}
			//Paint();
		});


		$('#btnCopyTimeSheet').click(function () {
			var getCrewLastBookedHours = $('#GetCrewLastBookedHours').val();
			var selecteddt = $('.multiple').val();
			//debugger;  //ok
			$.ajax({
				url: getCrewLastBookedHours,
				data:
					{
					crewId: $('#ddlCrew').val(),
					copydate: selecteddt
					},
				type: "GET",
				contentType: "application/json;charset=UTF-8",
				dataType: "json",
				success: function (result) {

					var rowcounter = 0;
					//delete extra rows
					$('.table-responsive tr').not(":first").each(function (i, row) {
						rowcounter++;

						if (rowcounter > 3) {
							$(this).remove();
						}
					})

					//clear  other sttaic time pickers
					$('#stdt0').val('0000');
					$('#enddat0').val('0000');
					$('#stdt1').val('0000');
					$('#enddat1').val('0000');
					$('#stdt2').val('0000');
					$('#enddat2').val('0000');

					$('#txtComments').val('');
					$('#Comments').html('');

					//reset css
					$('#stdt0').css('border-color', 'Black');
					$('#enddat0').css('border-color', 'Black');
					$('#stdt1').css('border-color', 'Black');
					$('#enddat1').css('border-color', 'Black');
					$('#stdt2').css('border-color', 'Black');
					$('#enddat2').css('border-color', 'Black');

					console.log('Copy timesheet copy values')
					console.log(result);

					if (result != 'null') {

						//console.log('result received');
						var timearray = result.split(',');
						var stcontrolcounter = 3;
						var endcontrolcounter = 3;




						//create new time pickers dynamically
						if (timearray.length > 6) {
							for (var count = 6; count < timearray.length; count++) {
								if (count % 2 == 0) addCloneMappingRow();
							}
						}

						for (var i = 0; i < timearray.length; i++) {



							if (i == 0) $('#stdt0').val(timearray[i]);
							if (i == 1) { $('#enddat0').val(timearray[i]); CalculateHoursAndPaint(timearray[i - 1], timearray[i], 1); }
							if (i == 2) $('#stdt1').val(timearray[i]);
							if (i == 3) { $('#enddat1').val(timearray[i]); CalculateHoursAndPaint(timearray[i - 1], timearray[i], 1); }
							if (i == 4) $('#stdt2').val(timearray[i]);
							if (i == 5) { $('#enddat2').val(timearray[i]); CalculateHoursAndPaint(timearray[i - 1], timearray[i], 1); }




							if (i > 5) {
								//debugger;

								if (i % 2 == 0) {
									//debugger;
									console.log(stcontrolcounter);
									var tmp = $('#stdt' + stcontrolcounter);
									stcontrolcounter = stcontrolcounter + 1;
									$(tmp).val(timearray[i]);

									//$(tmp).css('border-color', 'Red');
								}
								else {
									var tmpend = $('#enddat' + endcontrolcounter);
									endcontrolcounter = endcontrolcounter + 1;
									$(tmpend).val(timearray[i]);
									CalculateHoursAndPaint(timearray[i - 1], timearray[i], 1);
									//$(tmpend).css('border-color', 'Red');
								}
							}

						}

						//check for compliance as now all the values are set for all time pickers
						CheckCompliance().done(function (data) {

						});


					}
					else {

						toastr.clear();
						toastr.info("No data available to be copied over. Please try with some other date.");

					}

				},
				error: function (errormessage) {
					//debugger;
					console.log(errormessage.responseText);
				}
			});

		});

		function ValidateTime()
		{

			var isValid = true;
			var timedata = [];
			timeadjustmentvalidity = true;
			//run through each row
			$('.table-responsive tr').not(":first").each(function (i, row) {

				// reference all the stuff you need first
				var $row = $(row),
					$stdt = $row.find('input[id*="stdt"]'),
					$enddt = $row.find('input[id*="enddat"]');

				//console.log('Printing Time in ValidateTime before modification');
				//console.log($stdt.val());
				//console.log($enddt.val());



				if ($stdt.val().length < 4) {
					var tempst = $stdt.val();
					if (tempst == '') { // this if ensures that initially textbox values are 0000 and not 00
						$stdt.val('0000');

					}
					else {
						tempst = tempst.substr(0, 2) + '00';
						$stdt.val(tempst);
					}

				}

				if ($enddt.val().length < 4) {
					var tempend = $enddt.val();
					if (tempend == '') { // this if ensures that initially textbox values are 0000 and not 00
						$enddt.val('0000');
					}
					else {
						tempend = tempend.substr(0, 2) + '00';
						$enddt.val(tempend);
					}
				}

				if ($stdt.val() != $enddt.val() && $enddt.val() != '0000') {
					if (adjustmentvalue == '+1') {

						if ($stdt.val() == '0000' || $stdt.val() == '0030') {
							isValid = false;
							toastr.clear();
							toastr.error("Time entry should start with +1hr time adjustment.");
							ClearTimePickers();
							DeColorise();
							LoadData();
							isValid = true;
							timeadjustmentvalidity = false;
							return isValid;
						}
					}

					if (adjustmentvalue == '+30') {

						if ($stdt.val() == '0000' ) {
							isValid = false;
							toastr.clear();
							toastr.error("Time entry should start with +30min time adjustment.");
							ClearTimePickers();
							DeColorise();
							LoadData();
							isValid = true;
							timeadjustmentvalidity = false;
							return isValid;
						}
					}
				}

				console.log('Printing Time in ValidateTime after modification');
				console.log($stdt.val());
				console.log($enddt.val());

				if ($stdt.val() != $enddt.val() && $enddt.val() != '0000' && $enddt.val().length == 4) {

					if ($stdt.val() >= $enddt.val()) {
						isValid = false;
						console.log('validatetime--false1');
						return isValid;
					}

					//check if these are valid times
					if ($.inArray($stdt.val(), allowedhours) != -1 && $.inArray($enddt.val(), allowedhours) != -1) {
						timedata[i] = new Array($stdt.val(), $enddt.val());
					}
					else {
						isValid = false;
						console.log('validatetime--false2');
						return isValid;
					}
				}

				console.log('in typeahead validate');
				//console.log(timedata);

			});

			//sort the array based on start time
			timedata.sort(function (a, b) {
				return a[1] - b[1];
			});

			timedata.forEach(function (item) {
				console.log('Printing each item');
				console.log(item);

				//if (item != 'null') {



				//}


			});

			var i;
			for (i = 0; i < timedata.length; i++)
			{
				var currentItem = timedata[i];

				if (timedata.length == 0) isValid = true;

				if (i > 0)
				{
					var previousItem = timedata[i - 1];

					if (currentItem[0] <= previousItem[1])
					{
						isValid = false;
						return isValid;
					}
				}
			}



			return isValid;

		}

		//gets basic details of crew
		function GetCrewBasicDetails(getcrewInfoPostLink) {
			return $.ajax({
				url: getcrewInfoPostLink,
				data:
				{
					ID: $('#ddlCrew').val()
				},
				type: "GET",
				contentType: "application/json;charset=UTF-8",
				dataType: "json",
				async: 'false',
				success: function (result) {
					//debugger;
					//alert(result.Name);
					$('#ID').val(result.ID);
					$('#FullName').val(result.Name);
					$('#Rank').val(result.RankName);
					$('#Coments').val(result.Notes);
					$('#ServiceTerms1').val(result.ActiveFrom1);
					$('#ServiceTerms2').val(result.ActiveTo1);
					var fdt = new Date(result.ActiveFrom1);
					var tdt = new Date();  //new Date(result.ActiveTo1);
					$('.multiple').datepicker('option', 'minDate', fdt);
					//alert(tdt);
					//$('.multiple').datepicker('option', 'maxDate', tdt);

				},
				error: function (errormessage) {
					//debugger;
					console.log(errormessage.responseText);
				}
			});
		}

		function GetCrewBookedHours(getCrewBookedHours) {

			return $.ajax({
				url: getCrewBookedHours,
				data:
				{
					crewId: $('#ddlCrew').val(),
					bookDate: $('.multiple').val()
				},
				type: "GET",
				contentType: "application/json;charset=UTF-8",
				dataType: "json",
				async: 'false',
				success: function (result) {

					console.log('In getCrewBookedHours');
					console.log(result);
					if (result.ID > 0) {
						$('#hdnID').val(result.ID);
						$('#hdnNCID').val(result.NCDetailsID);
					}


				},
				error: function (errormessage) {
					//debugger;
					console.log(errormessage.responseText);
				}
			});
		}

		function ClearWorkingTime() {
			$('#TotalWorkHours').val('');
			$('#TotalRestHours').val('');
		}

		function CalculateWorkingTime(tdata) {
			var workedhrs = 0;
			var whrs = '0';
			var resthours = 0;
			var hour = 0;
			var workhr_hrcomponent = 0;
			var workhr_mincomponent = 0;

			//calculate total hours worked
			for (var i = 0; i < tdata.length; i++) {

				var s = [];
				var e = [];

				s[0] = tdata[i][0].substr(0, 2);
				s[1] = tdata[i][0].substr(tdata[i][0].length - 2);

				e[0] = tdata[i][1].substr(0, 2);
				e[1] = tdata[i][1].substr(tdata[i][1].length - 2);

				if (e[1] == 59) {
					e[0] = 24;
					e[1] = 00;
				}

				var min = e[1] - s[1];
				var hour_carry = 0;

				if (min < 0) {
					min += 60;
					hour_carry += 1;

				}

				hour = (e[0] - s[0] - hour_carry);

				console.log('Printing Min');
				console.log(min);

				workhr_hrcomponent += hour;
				workhr_mincomponent += min;

				if (workhr_mincomponent >= 60) {
					workhr_hrcomponent += 1;
					workhr_mincomponent = workhr_mincomponent - 60;
				}

				s = 0;
				e = 0;
				min = 0;
				hour = 0;
			}


			if (workhr_hrcomponent == 0) workhr_hrcomponent = '00';
			else if (workhr_hrcomponent < 10) workhr_hrcomponent = '0' + workhr_hrcomponent;

			if (workhr_mincomponent == 0) workhr_mincomponent = '00';
			else if (workhr_mincomponent < 10) workhr_mincomponent = '0' + workhr_mincomponent;

			workedhrs = workhr_hrcomponent + workhr_mincomponent;
			whrs = workedhrs;
			$('#TotalWorkHours').val(workhr_hrcomponent + ':' + workhr_mincomponent);

			//calculating total rest hours
			var rest_hours = '2400';
			var rest_hrcomponent = 0;
			var rest_mincomponent = 0;

			rest_hrcomponent = 24 - parseInt(workhr_hrcomponent);

			if (parseInt(workhr_mincomponent) == 30) {
				rest_hrcomponent = rest_hrcomponent - 1;
				rest_mincomponent = '30';
			}
			else {
				rest_mincomponent = '00';
			}

			$('#TotalRestHours').val(rest_hrcomponent + ':' + rest_mincomponent);

			//var e_rest = [];
			//var s_rest = [];

			//e_rest[0] = rest_hours.substr(0, 2);
			//e_rest[1] = rest_hours.substr(rest_hours.length - 2);

			//s_rest[0] = whrs.toString().substr(0, 2);
			//s_rest[1] = whrs.toString().substr(whrs.length - 2);

			//var min_rest = e_rest[1] - s_rest[1];
			//console.log('min res prining');
			//console.log(min_rest);
			//var hr_carry_rest = 0;

			//if (min_rest < 0) {
			//	min_rest += 60;
			//	hr_carry_rest += 1;
			//}

			//var hour_rest = e_rest[0] - s_rest[0] - hr_carry_rest;


			//if (hour_rest == 0) hour_rest = '00';
			//else if (hour_rest < 10) hour_rest = '0' + hour_rest;

			//if (min_rest == 0) min_rest = '00';
			//else if (min_rest < 10) min_rest = '0' + min_rest;


			//resthours = hour_rest + min_rest;

			//$('#TotalRestHours').val(hour_rest + ':' + min_rest);
		}

		$(document).on('blur', 'input[id*="stdt"],input[id*="enddat"]', function () {
			var validData = true;
			//var isdataValid = ValidateTime();
			var reg = /^([01]\d|2[0-3])([03][0])$/;
			if (!ValidateTime()) {
				toastr.error("Invalid Data. Please re-enter .");
				validData = false;
				//toastr.options = {
				//	"positionClass": "toast-top-full-width"
				//};
				ClearTimePickers();
			}

			console.log($(this).val());
			console.log($(this).val().length);
			console.log($.inArray($(this).val(), allowedhours));
			if ($(this).val().length == 4) {
				//if (!reg.test($(this).val()) && $(this.val()) != '2400') {
				if ($.inArray($(this).val(), allowedhours) == -1) {
					validData = false;

					toastr.error("Invalid Time Format. Please Re-enter.");
					//toastr.options = {
					//	"positionClass": "toast-top-full-width"
					//};
					ClearTimePickers();
				}
				else
				{
					changeColor($(this));
				}
			}

			
			console.log('in Blur');

			//if (validData) {
			//	changeColor($(this));
			//}
			//alert('Bad Data');
		});

		$(document).on('change', 'input[id*="stdt"],input[id*="enddat"]', function () {
			//var reg = /^([01]\d|2[0-3])([03][0])$/;

			console.log($(this).val().length);
			if ($(this).val().length == 4) {
				//if (!reg.test($(this).val())) {
				if ($.inArray($(this).val(), allowedhours) == -1) {

					toastr.error("Invalid Time Format. Please Re-enter.");
					ClearTimePickers();
				}
			}
			//alert('Bad Data');
		});

		$(document).on('click', 'input[id*="stdt"],input[id*="enddat"]', function () {
			if ($(this).val() == '0000')
				$(this).val('');
		});
			

		function SetTimeInPicker(result) {

			var dfrd1 = $.Deferred();
			var rowcounter = 0;



			//delete extra rows
			$('.table-responsive tr').not(":first").each(function (i, row) {
				rowcounter++;

				if (rowcounter > 3) {
					$(this).remove();
				}
			});

			//clear  other sttaic time pickers
			$('#stdt0').val('0000');
			$('#enddat0').val('0000');
			$('#stdt1').val('0000');
			$('#enddat1').val('0000');
			$('#stdt2').val('0000');
			$('#enddat2').val('0000');

			$('#txtComments').val('');

			//reset css
			$('#stdt0').css('border-color', 'Black');
			$('#enddat0').css('border-color', 'Black');
			$('#stdt1').css('border-color', 'Black');
			$('#enddat1').css('border-color', 'Black');
			$('#stdt2').css('border-color', 'Black');
			$('#enddat2').css('border-color', 'Black');
			//debugger;

			if (result != 'null') {

				//console.log('result received');
				var timearray = result.ActualHours.split(',');
				var stcontrolcounter = 3;
				var endcontrolcounter = 3;


				// alert(result.Comments);
				$('#txtComments').val(result.Comments);

				//create new time pickers dynamically
				if (timearray.length > 6) {
					for (var count = 6; count < timearray.length; count++) {
						if (count % 2 == 0) addCloneMappingRow();
					}
				}

				for (var i = 0; i < timearray.length; i++) {


					//Paint cells in timeline
					if (i == 0) {
						CalculateHoursAndPaint(timearray[i], timearray[i + 1], ncoccured);
					}

					if (i % 2 == 0) {
						CalculateHoursAndPaint(timearray[i], timearray[i + 1], ncoccured);
					}

					hour = timearray[i].substr(0, 2);
					minute = timearray[i].substr(timearray[i].length - 2);

					if (i == 0) { $('#stdt0').val(timearray[i]); }
					if (i == 1) { $('#enddat0').val(timearray[i]); }
					if (i == 2) { $('#stdt1').val(timearray[i]); }
					if (i == 3) { $('#enddat1').val(timearray[i]); }
					if (i == 4) { $('#stdt2').val(timearray[i]); }
					if (i == 5) { $('#enddat2').val(timearray[i]); }

					if (i < timearray.length) {
						if (i % 2 == 0) {
							startTimeInMinute = (parseInt(hour) * 60) + parseInt(minute);
						}
						else {
							endTimeInMinute = (parseInt(hour) * 60) + parseInt(minute);
							//  PaintInTimeCalendar(startTimeInMinute, endTimeInMinute, 'occupied');
						}
					}

					if (i > 5) {
						//debugger;

						if (i % 2 == 0) {
							//debugger;
							//console.log(stcontrolcounter);
							var tmp = $('#stdt' + stcontrolcounter);
							stcontrolcounter = stcontrolcounter + 1;
							$(tmp).val(timearray[i]);

							$(tmp).css('border-color', 'Red');
						}
						else {
							var tmpend = $('#enddat' + endcontrolcounter);
							endcontrolcounter = endcontrolcounter + 1;
							$(tmpend).val(timearray[i]);

							$(tmpend).css('border-color', 'Red');
						}
					}

				}





			}
			else {
				//emty cells and delete extra rows
				ClearTimePickers();
			}

			dfrd1.resolve();

			return $.when(dfrd1).done(function () {
				console.log('tasks in SetTimeInPicker are done');
				// Both asyncs tasks are done
			}).promise();
		}

		function CheckCompliance() {

			var dfrd2 = $.Deferred();
			var isPostable = false;

			console.log('In CheckComplaince');

			//clear previous comments
			$('#Comments').html('');

			//check for compliance
			var compliancecheckurl = $('#checkcompliance').val();
			var tsheetdata = [];
			//run through each row
			$('.table-responsive tr').not(":first").each(function (i, row) {

				// reference all the stuff you need first
				var $row = $(row),
					$stdt = $row.find('input[id*="stdt"]'),
					$enddt = $row.find('input[id*="enddat"]');

				if ($stdt.val() != '0000' || $enddt.val() != '0000') {
					isPostable = true;
				}

				
				//console.log('In loop');
				//console.log($stdt.val());

				tsheetdata[i] = new Array($stdt.val(), $enddt.val());



			});

			//console.log('In ComplianceCheck');
			//console.log(tsheetdata);
			//console.log(isPostable);
			//check if there is valid time

			if (isPostable) {



				CalculateWorkingTime(tsheetdata);



				//////////////////////////////////////////////



				var TSheetJsonObject = { WF: [] };
				TSheetJsonObject.WF.push({ d: tsheetdata });
				//post
				$.ajax({
					url: compliancecheckurl,
					data: JSON.stringify({ 'timesheetjsondata': JSON.stringify(TSheetJsonObject), crewId: $('#ddlCrew').val(), selectedDate: $('.multiple').val() }),
					type: "POST",
					contentType: "application/json;charset=utf-8",
					dataType: "json",
					async: "false",
					success: function (result) {

						//debugger;
						$('#Comments').html(result);

						// debugger;

						//set calendar color
						if ($.trim(result).length > 0) {

							Paint('1');
							ncoccured = 1;
							//Commented by Dheeman
							$('.ui-datepicker-calendar tr').each(function () {

								//chnage colour of calendar for altered date -- change to red
								$(this).find('td.ui-datepicker-current-day').each(function () {
									//console.log('found');
									initflag = false;

								});
							});

							//chnage color of text boxes

							$('.table-responsive tr').not(":first").each(function (i, row) {

								// reference all the stuff you need first
								var row = $(row),
									stdt = row.find('input[id*="stdt"]'),
									enddt = row.find('input[id*="enddat"]');

								$(stdt).css('border-color', 'Red');
								$(enddt).css('border-color', 'Red');

							});



						}
						else {
							Paint('0');

							//Commented by Dheeman
							$('.ui-datepicker-calendar tr').each(function () {

								//chnage colour of calendar for altered date
								$(this).find('td.ui-datepicker-current-day').each(function () {
									//console.log('found');
									initflag = false;


								});
							});


							//chnage color of text boxes to black

							$('.table-responsive tr').not(":first").each(function (i, row) {

								// reference all the stuff you need first
								var row = $(row),
									stdt = row.find('input[id*="stdt"]'),
									enddt = row.find('input[id*="enddat"]');

								$(stdt).css('border-color', 'Black');
								$(enddt).css('border-color', 'Black');

							});


						}

						//Paint time line
						PaintBox(ncoccured);

					},
					error: function (errormessage) {
						console.log(errormessage.responseText);
					}
				});



				dfrd2.resolve();

				//Colourise Calendar
				SetCalendarColor();

				return $.when(dfrd2).done(function () {
					console.log('tasks in CheckCompliance are done');
					// Both asyncs tasks are done
				}).promise();
			}
			else {
				ClearWorkingTime();
				SetCalendarColor();
			}

		}

		function LoadData() {
			$('[name=timebox]').removeClass('pre-occupied');
			$('[name=timebox]').removeClass('occupied');
			var getcrewInfoPostLink = $('#getcrewinfo').val();
			var isBookingBlocked = false;
			$('#hdnID').val('');
			$('#hdnNCID').val('');

			//debugger;
			var getCrewBookedHours = $('#GetCrewBookedHours').val();
			var selectedDate = $('.multiple').val();
			//debugger;  //ok

			console.log('In Data Load-------------');

			//check if there is a minus one day adjustement where this crew ha snot filled his complete double time sheet
			$.when(GetLastMinusAdjustmentDate($('#ddlCrew').val(), $('.multiple').val()), GetAdjustmentFactor()).done(function (result,result1) {
				console.log('In Minus One check');
				console.log(result[0].BookCount);
				if (result[0].BookCount == 1) {
					isBookingBlocked = true;
					$('#btnAdd').attr('disabled', true);
					//show message and block booking
					var msg = "You are not allowed to book time for this date. Please complete your booking for " + result[0].LastBookDate;
					$('#myModal').modal('show');
					$('#succMsg').html(msg);
				}


				if (!isBookingBlocked) {
					$('#btnAdd').attr('disabled', false);
					console.log('Booking is not blocked');
					$.when(GetCrewBasicDetails(getcrewInfoPostLink), GetCrewBookedHours(getCrewBookedHours)).done(function (res, res1) {

						console.log('In LoadData');
						//console.log(res1[0].ActualHours);

						var result = res1[0];

						//$(function () {


						//var getters = addTPDynamic($('input.js-typeahead'));

						//added a check here to ensure done is working
						if (result != 'null') {
							//$.when.apply(this, getters).then(function () {
							SetTimeInPicker(result).done(function () {
								// function1 is done, we can now call function2
								console.log('SetTimeInPicker is done!');

								CheckCompliance().done(function () {
									//function2 is done
									console.log('CheckCompliance is done!');



								}); //end check compliance


							}); //end settimepicker

							//}); //end AddTP
						}
						else {
							ClearTimePickers();
							
							//CheckCompliance();  //.done(function () {
							//function2 is done
							//console.log('Do Nothing');
							//$('.multiple').val(selectedDate);



							//}); //end check compliance
						}

						//});




					});

				}

				//disable timeinput textbox in sa login 

				//$('input[id*="stdt"],input[id*="enddat"]').attr('disabled', 'disabled');
				

			});



			return false;
		}

		$(document).ready(function () {
            loggedInUserId = $('#hdnCrewId').val();
            

            if (loggedInUserId > 0 ) { // user level log in

				//console.log('Logged In UserId');
				//console.log(loggedInUserId);
				$('#ddlCrew').val(loggedInUserId);
				$("#ddlCrew").prop("disabled", true);
				//LoadData();
				SetCalendarColor();

			}


			

			$('#schedule th:nth-child(1)').hide();
			$('#trclone td:nth-child(1)').hide();
			$('#trclone td:nth-child(2)').hide();
		});

		function Paint(color)
		{

		}

		$('#btnAdd').click(function () {





			if (ValidateTime() && timeadjustmentvalidity == true) {

				var basicTS = $('#basicTS').val();

				var tsdata = [];
				//run through each row
				$('.table-responsive tr').not(":first").each(function (i, row) {

					// reference all the stuff you need first
					var $row = $(row),
						$stdt = $row.find('input[id*="stdt"]'),
						$enddt = $row.find('input[id*="enddat"]');

					if ($stdt.val() != $enddt.val()) {
						tsdata[i] = new Array($stdt.val(), $enddt.val());
					}

					//console.log(tsdata);

				})


				if ($('#ddlCrew').val().length > 0) {
					//debugger;
					var RanksJsonObject = { WF: [] };
					RanksJsonObject.WF.push({ d: tsdata });
					//post
					$.ajax({
						url: basicTS,
						data: JSON.stringify({
							'timesheetjsondata': JSON.stringify(RanksJsonObject), crewId: $('#ddlCrew').val(), selectedDate: $('.multiple').val(), comments: $('#txtComments').val(), adjustmentFactor: adjustmentvalue, ID: $('#hdnID').val(), NcdetailsId: $('#hdnNCID').val()
						}),
						type: "POST",
						contentType: "application/json;charset=utf-8",
						dataType: "json",
						async: "false",
						success: function (result) {
                            //debugger;
                            $('#hdnID').val(result[0]);
                            $('#hdnNCID').val(result[1]);

							toastr.options = {
								"closeButton": false,
								"debug": false,
								"newestOnTop": false,
								"progressBar": false,
								"positionClass": "toast-bottom-full-width",
								"preventDuplicates": false,
								"onclick": null,
								"showDuration": "300",
								"hideDuration": "1000",
								"timeOut": "5000",
								"extendedTimeOut": "1000",
								"showEasing": "swing",
								"hideEasing": "linear",
								"showMethod": "fadeIn",
								"hideMethod": "fadeOut"
							};

							toastr.success("Time Added Successfully");

							//clearTextBox();
						},
						error: function (errormessage) {
							//console.log(errormessage.responseText);
						}
					});
				}
			}
			else {
				toastr.error("Invalid Data. Please Re-enter.");
				ClearTimePickers();
			}

		});


    </script>

}
